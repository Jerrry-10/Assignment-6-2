{"ast":null,"code":"/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.diffLines = diffLines;\nexports.diffTrimmedLines = diffTrimmedLines;\nexports.lineDiff = void 0;\n/*istanbul ignore end*/\n\nvar\n/*istanbul ignore start*/\n_base = _interopRequireDefault(require(\"./base\"))\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_params = require(\"../util/params\")\n/*istanbul ignore end*/\n;\n/*istanbul ignore start*/\n\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/*istanbul ignore end*/\n\n\nvar lineDiff = new\n/*istanbul ignore start*/\n_base\n/*istanbul ignore end*/\n[\n/*istanbul ignore start*/\n\"default\"\n/*istanbul ignore end*/\n]();\n/*istanbul ignore start*/\n\nexports.lineDiff = lineDiff;\n/*istanbul ignore end*/\n\nlineDiff.tokenize = function (value) {\n  var retLines = [],\n      linesAndNewlines = value.split(/(\\n|\\r\\n)/); // Ignore the final empty token that occurs if the string ends with a new line\n\n  if (!linesAndNewlines[linesAndNewlines.length - 1]) {\n    linesAndNewlines.pop();\n  } // Merge the content and line separators into single tokens\n\n\n  for (var i = 0; i < linesAndNewlines.length; i++) {\n    var line = linesAndNewlines[i];\n\n    if (i % 2 && !this.options.newlineIsToken) {\n      retLines[retLines.length - 1] += line;\n    } else {\n      if (this.options.ignoreWhitespace) {\n        line = line.trim();\n      }\n\n      retLines.push(line);\n    }\n  }\n\n  return retLines;\n};\n\nfunction diffLines(oldStr, newStr, callback) {\n  return lineDiff.diff(oldStr, newStr, callback);\n}\n\nfunction diffTrimmedLines(oldStr, newStr, callback) {\n  var options =\n  /*istanbul ignore start*/\n  (0,\n  /*istanbul ignore end*/\n\n  /*istanbul ignore start*/\n  _params\n  /*istanbul ignore end*/\n  .\n  /*istanbul ignore start*/\n  generateOptions\n  /*istanbul ignore end*/\n  )(callback, {\n    ignoreWhitespace: true\n  });\n  return lineDiff.diff(oldStr, newStr, options);\n}","map":{"version":3,"sources":["C:\\Users\\Jerry\\node_modules\\diff\\src\\diff\\line.js"],"names":["lineDiff","Diff","retLines","linesAndNewlines","value","i","line","options","ignoreWhitespace"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA;AAAA;AAAA;;AACA;AAAA;AAAA,OAAA,GAAA,OAAA,CAAA,gBAAA;AAAA;AAAA;;;;;;;;;;;;AAEO,IAAMA,QAAQ,GAAG;AAAIC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,CAAJ,EAAjB;;;;;;AACPD,QAAQ,CAARA,QAAAA,GAAoB,UAAA,KAAA,EAAgB;AAClC,MAAIE,QAAQ,GAAZ,EAAA;AAAA,MACIC,gBAAgB,GAAGC,KAAK,CAALA,KAAAA,CAFW,WAEXA,CADvB,CADkC,CAIlC;;AACA,MAAI,CAACD,gBAAgB,CAACA,gBAAgB,CAAhBA,MAAAA,GAAtB,CAAqB,CAArB,EAAoD;AAClDA,IAAAA,gBAAgB,CAAhBA,GAAAA;AANgC,GAAA,CASlC;;;AACA,OAAK,IAAIE,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGF,gBAAgB,CAApC,MAAA,EAA6CE,CAA7C,EAAA,EAAkD;AAChD,QAAIC,IAAI,GAAGH,gBAAgB,CAA3B,CAA2B,CAA3B;;AAEA,QAAIE,CAAC,GAADA,CAAAA,IAAS,CAAC,KAAA,OAAA,CAAd,cAAA,EAA2C;AACzCH,MAAAA,QAAQ,CAACA,QAAQ,CAARA,MAAAA,GAATA,CAAQ,CAARA,IAAAA,IAAAA;AADF,KAAA,MAEO;AACL,UAAI,KAAA,OAAA,CAAJ,gBAAA,EAAmC;AACjCI,QAAAA,IAAI,GAAGA,IAAI,CAAXA,IAAOA,EAAPA;AACD;;AACDJ,MAAAA,QAAQ,CAARA,IAAAA,CAAAA,IAAAA;AACD;AACF;;AAED,SAAA,QAAA;AAvBFF,CAAAA;;AA0BO,SAAA,SAAA,CAAA,MAAA,EAAA,MAAA,EAAA,QAAA,EAA6C;AAAE,SAAOA,QAAQ,CAARA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAP,QAAOA,CAAP;AAAiD;;AAChG,SAAA,gBAAA,CAAA,MAAA,EAAA,MAAA,EAAA,QAAA,EAAoD;AACzD,MAAIO,OAAO;AAAG;AAAA,GAAA;AAAA;;AAAA;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAAA;AAAA;AAAA,IAAA,QAAA,EAA0B;AAACC,IAAAA,gBAAgB,EAAE;AAAnB,GAA1B,CAAd;AACA,SAAOR,QAAQ,CAARA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAP,OAAOA,CAAP;AACD","sourcesContent":["import Diff from './base';\nimport {generateOptions} from '../util/params';\n\nexport const lineDiff = new Diff();\nlineDiff.tokenize = function(value) {\n  let retLines = [],\n      linesAndNewlines = value.split(/(\\n|\\r\\n)/);\n\n  // Ignore the final empty token that occurs if the string ends with a new line\n  if (!linesAndNewlines[linesAndNewlines.length - 1]) {\n    linesAndNewlines.pop();\n  }\n\n  // Merge the content and line separators into single tokens\n  for (let i = 0; i < linesAndNewlines.length; i++) {\n    let line = linesAndNewlines[i];\n\n    if (i % 2 && !this.options.newlineIsToken) {\n      retLines[retLines.length - 1] += line;\n    } else {\n      if (this.options.ignoreWhitespace) {\n        line = line.trim();\n      }\n      retLines.push(line);\n    }\n  }\n\n  return retLines;\n};\n\nexport function diffLines(oldStr, newStr, callback) { return lineDiff.diff(oldStr, newStr, callback); }\nexport function diffTrimmedLines(oldStr, newStr, callback) {\n  let options = generateOptions(callback, {ignoreWhitespace: true});\n  return lineDiff.diff(oldStr, newStr, options);\n}\n"]},"metadata":{},"sourceType":"script"}