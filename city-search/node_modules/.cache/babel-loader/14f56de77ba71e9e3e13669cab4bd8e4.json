{"ast":null,"code":"/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.diffWords = diffWords;\nexports.diffWordsWithSpace = diffWordsWithSpace;\nexports.wordDiff = void 0;\n/*istanbul ignore end*/\n\nvar\n/*istanbul ignore start*/\n_base = _interopRequireDefault(require(\"./base\"))\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_params = require(\"../util/params\")\n/*istanbul ignore end*/\n;\n/*istanbul ignore start*/\n\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/*istanbul ignore end*/\n// Based on https://en.wikipedia.org/wiki/Latin_script_in_Unicode\n//\n// Ranges and exceptions:\n// Latin-1 Supplement, 0080–00FF\n//  - U+00D7  × Multiplication sign\n//  - U+00F7  ÷ Division sign\n// Latin Extended-A, 0100–017F\n// Latin Extended-B, 0180–024F\n// IPA Extensions, 0250–02AF\n// Spacing Modifier Letters, 02B0–02FF\n//  - U+02C7  ˇ &#711;  Caron\n//  - U+02D8  ˘ &#728;  Breve\n//  - U+02D9  ˙ &#729;  Dot Above\n//  - U+02DA  ˚ &#730;  Ring Above\n//  - U+02DB  ˛ &#731;  Ogonek\n//  - U+02DC  ˜ &#732;  Small Tilde\n//  - U+02DD  ˝ &#733;  Double Acute Accent\n// Latin Extended Additional, 1E00–1EFF\n\n\nvar extendedWordChars = /^[A-Za-z\\xC0-\\u02C6\\u02C8-\\u02D7\\u02DE-\\u02FF\\u1E00-\\u1EFF]+$/;\nvar reWhitespace = /\\S/;\nvar wordDiff = new\n/*istanbul ignore start*/\n_base\n/*istanbul ignore end*/\n[\n/*istanbul ignore start*/\n\"default\"\n/*istanbul ignore end*/\n]();\n/*istanbul ignore start*/\n\nexports.wordDiff = wordDiff;\n/*istanbul ignore end*/\n\nwordDiff.equals = function (left, right) {\n  if (this.options.ignoreCase) {\n    left = left.toLowerCase();\n    right = right.toLowerCase();\n  }\n\n  return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);\n};\n\nwordDiff.tokenize = function (value) {\n  // All whitespace symbols except newline group into one token, each newline - in separate token\n  var tokens = value.split(/([^\\S\\r\\n]+|[()[\\]{}'\"\\r\\n]|\\b)/); // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.\n\n  for (var i = 0; i < tokens.length - 1; i++) {\n    // If we have an empty string in the next field and we have only word chars before and after, merge\n    if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {\n      tokens[i] += tokens[i + 2];\n      tokens.splice(i + 1, 2);\n      i--;\n    }\n  }\n\n  return tokens;\n};\n\nfunction diffWords(oldStr, newStr, options) {\n  options =\n  /*istanbul ignore start*/\n  (0,\n  /*istanbul ignore end*/\n\n  /*istanbul ignore start*/\n  _params\n  /*istanbul ignore end*/\n  .\n  /*istanbul ignore start*/\n  generateOptions\n  /*istanbul ignore end*/\n  )(options, {\n    ignoreWhitespace: true\n  });\n  return wordDiff.diff(oldStr, newStr, options);\n}\n\nfunction diffWordsWithSpace(oldStr, newStr, options) {\n  return wordDiff.diff(oldStr, newStr, options);\n}","map":{"version":3,"sources":["C:\\Users\\Jerry\\node_modules\\diff\\src\\diff\\word.js"],"names":["extendedWordChars","reWhitespace","wordDiff","Diff","left","right","tokens","value","i","options","ignoreWhitespace"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA;AAAA;AAAA;;AACA;AAAA;AAAA,OAAA,GAAA,OAAA,CAAA,gBAAA;AAAA;AAAA;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMA,iBAAiB,GAAvB,+DAAA;AAEA,IAAMC,YAAY,GAAlB,IAAA;AAEO,IAAMC,QAAQ,GAAG;AAAIC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,CAAJ,EAAjB;;;;;;AACPD,QAAQ,CAARA,MAAAA,GAAkB,UAAA,IAAA,EAAA,KAAA,EAAsB;AACtC,MAAI,KAAA,OAAA,CAAJ,UAAA,EAA6B;AAC3BE,IAAAA,IAAI,GAAGA,IAAI,CAAXA,WAAOA,EAAPA;AACAC,IAAAA,KAAK,GAAGA,KAAK,CAAbA,WAAQA,EAARA;AACD;;AACD,SAAOD,IAAI,KAAJA,KAAAA,IAAmB,KAAA,OAAA,CAAA,gBAAA,IAAiC,CAACH,YAAY,CAAZA,IAAAA,CAAlC,IAAkCA,CAAlC,IAA6D,CAACA,YAAY,CAAZA,IAAAA,CAAxF,KAAwFA,CAAxF;AALFC,CAAAA;;AAOAA,QAAQ,CAARA,QAAAA,GAAoB,UAAA,KAAA,EAAgB;AAClC;AACA,MAAII,MAAM,GAAGC,KAAK,CAALA,KAAAA,CAFqB,iCAErBA,CAAb,CAFkC,CAIlC;;AACA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGF,MAAM,CAANA,MAAAA,GAApB,CAAA,EAAuCE,CAAvC,EAAA,EAA4C;AAC1C;AACA,QAAI,CAACF,MAAM,CAACE,CAAC,GAAT,CAAO,CAAP,IAAkBF,MAAM,CAACE,CAAC,GAA1B,CAAwB,CAAxB,IACKR,iBAAiB,CAAjBA,IAAAA,CAAuBM,MAAM,CADlC,CACkC,CAA7BN,CADL,IAEKA,iBAAiB,CAAjBA,IAAAA,CAAuBM,MAAM,CAACE,CAAC,GAFxC,CAEsC,CAA7BR,CAFT,EAEgD;AAC9CM,MAAAA,MAAM,CAANA,CAAM,CAANA,IAAaA,MAAM,CAACE,CAAC,GAArBF,CAAmB,CAAnBA;AACAA,MAAAA,MAAM,CAANA,MAAAA,CAAcE,CAAC,GAAfF,CAAAA,EAAAA,CAAAA;AACAE,MAAAA,CAAC;AACF;AACF;;AAED,SAAA,MAAA;AAhBFN,CAAAA;;AAmBO,SAAA,SAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAA4C;AACjDO,EAAAA,OAAO;AAAG;AAAA,GAAA;AAAA;;AAAA;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAAA;AAAA;AAAA,IAAA,OAAA,EAAyB;AAACC,IAAAA,gBAAgB,EAAE;AAAnB,GAAzB,CAAVD;AACA,SAAOP,QAAQ,CAARA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAP,OAAOA,CAAP;AACD;;AAEM,SAAA,kBAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAqD;AAC1D,SAAOA,QAAQ,CAARA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAP,OAAOA,CAAP;AACD","sourcesContent":["import Diff from './base';\nimport {generateOptions} from '../util/params';\n\n// Based on https://en.wikipedia.org/wiki/Latin_script_in_Unicode\n//\n// Ranges and exceptions:\n// Latin-1 Supplement, 0080–00FF\n//  - U+00D7  × Multiplication sign\n//  - U+00F7  ÷ Division sign\n// Latin Extended-A, 0100–017F\n// Latin Extended-B, 0180–024F\n// IPA Extensions, 0250–02AF\n// Spacing Modifier Letters, 02B0–02FF\n//  - U+02C7  ˇ &#711;  Caron\n//  - U+02D8  ˘ &#728;  Breve\n//  - U+02D9  ˙ &#729;  Dot Above\n//  - U+02DA  ˚ &#730;  Ring Above\n//  - U+02DB  ˛ &#731;  Ogonek\n//  - U+02DC  ˜ &#732;  Small Tilde\n//  - U+02DD  ˝ &#733;  Double Acute Accent\n// Latin Extended Additional, 1E00–1EFF\nconst extendedWordChars = /^[a-zA-Z\\u{C0}-\\u{FF}\\u{D8}-\\u{F6}\\u{F8}-\\u{2C6}\\u{2C8}-\\u{2D7}\\u{2DE}-\\u{2FF}\\u{1E00}-\\u{1EFF}]+$/u;\n\nconst reWhitespace = /\\S/;\n\nexport const wordDiff = new Diff();\nwordDiff.equals = function(left, right) {\n  if (this.options.ignoreCase) {\n    left = left.toLowerCase();\n    right = right.toLowerCase();\n  }\n  return left === right || (this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right));\n};\nwordDiff.tokenize = function(value) {\n  // All whitespace symbols except newline group into one token, each newline - in separate token\n  let tokens = value.split(/([^\\S\\r\\n]+|[()[\\]{}'\"\\r\\n]|\\b)/);\n\n  // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.\n  for (let i = 0; i < tokens.length - 1; i++) {\n    // If we have an empty string in the next field and we have only word chars before and after, merge\n    if (!tokens[i + 1] && tokens[i + 2]\n          && extendedWordChars.test(tokens[i])\n          && extendedWordChars.test(tokens[i + 2])) {\n      tokens[i] += tokens[i + 2];\n      tokens.splice(i + 1, 2);\n      i--;\n    }\n  }\n\n  return tokens;\n};\n\nexport function diffWords(oldStr, newStr, options) {\n  options = generateOptions(options, {ignoreWhitespace: true});\n  return wordDiff.diff(oldStr, newStr, options);\n}\n\nexport function diffWordsWithSpace(oldStr, newStr, options) {\n  return wordDiff.diff(oldStr, newStr, options);\n}\n"]},"metadata":{},"sourceType":"script"}